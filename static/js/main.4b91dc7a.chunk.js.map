{"version":3,"sources":["store/reducers/tasksReducers.tsx","store/middleware/notification.tsx","store/store.tsx","views/AddTask/DialogTask/DialogTask.tsx","views/AddTask/AddTask.tsx","components/Portal/Portal.tsx","components/List/List.tsx","components/Task/Task.tsx","views/TasksList/TasksList.tsx","App.tsx","index.tsx"],"names":["tasksSlice","createSlice","name","initialState","error","tasks","id","text","date","active","priority","reducers","add","state","action","payload","task","finish","remove","actions","selectTasks","selectError","notificationMiddleware","next","test","type","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","success","configureStore","middleware","getDefaultMiddleware","concat","reducer","tasksReducer","DialogTitle","withStyles","theme","createStyles","root","margin","padding","spacing","closeButton","right","top","color","palette","grey","props","children","classes","onClose","other","disableTypography","className","Typography","variant","IconButton","aria-label","onClick","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","DialogTask","openDialog","closeDialog","addTask","dispatch","useDispatch","errorIsActive","useSelector","useState","inputTask","setInputTask","Date","selectedDate","setSelectedDate","priorityCheck","setPriorityCheck","handleClose","handleChangeInput","useCallback","e","target","value","handleSetDate","handleSetCheckbox","checked","labelError","useMemo","helperTextError","Dialog","aria-labelledby","open","fullWidth","disableBackdropClick","dividers","FormControl","style","width","TextField","label","helperText","onChange","InputProps","endAdornment","InputAdornment","utils","DateFnsUtils","DatePicker","marginTop","inputVariant","disablePast","FormControlLabel","control","Checkbox","Button","autoFocus","useStyles","makeStyles","marginLeft","AddTask","setOpenDialog","Fab","size","uuidv4","toLocaleDateString","split","join","minWidth","height","card","item","display","Portal","Paper","elevation","Card","overflow","overflowStyle","maxHeight","List","index","map","role","hidden","importantField","fontWeight","title","fontSize","Task","secondaryText","Box","p","ListItem","ListItemText","primary","secondary","ListItemSecondaryAction","edge","Divider","flexGrow","a11yProps","TasksList","setValue","activeTasks","filter","finishedTasks","AppBar","Tabs","event","newValue","Tab","App","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.4b91dc7a.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\ninterface tasksState {\n  error: boolean;\n  tasks: stateTask[];\n}\n\ninterface stateTask {\n  id: void | string;\n  text: string;\n  date: string;\n  active: boolean;\n  priority: boolean;\n}\n\nconst initialState: tasksState = {\n  error: false,\n  tasks: [\n    {\n      id: \"eefffa0d-898e-4db3-885e-3384a8aad3a4\",\n      text: \"Nauczyć się TS\",\n      date: \"20-12-2020\",\n      active: true,\n      priority: true,\n    },\n    {\n      id: \"eefffa0d-898e-4db3-885e-3384a8aad3a4\",\n      text: \"Umyć auto\",\n      date: \"10-12-2020\",\n      active: false,\n      priority: true,\n    },\n  ],\n};\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState,\n  reducers: {\n    add(state: tasksState, action: PayloadAction<{ task: stateTask }>) {\n      state.tasks = [...state.tasks, action.payload.task];\n    },\n    finish(state, action: PayloadAction<[]>) {\n      return;\n    },\n    remove(state, action: PayloadAction<[]>) {\n      return;\n    },\n    error(state, action: PayloadAction<{ error: boolean }>) {\n      state.error = action.payload.error;\n    },\n  },\n});\n\nexport const { add, finish, remove, error } = tasksSlice.actions;\n\nexport const selectTasks = (state: any) => state.tasks.tasks;\nexport const selectError = (state: any) => state.tasks.error;\n\nexport default tasksSlice.reducer;\n","import { toast } from \"react-toastify\";\n\ninterface actionInterface {\n  type: string;\n  payload: { error?: boolean };\n}\n\nconst notificationMiddleware = () => (next: any) => (\n  action: actionInterface\n) => {\n  if (/(.*)(error)/.test(action.type) && action.payload.error) {\n    toast.error(\"Something went wrong!\", {\n      position: \"top-right\",\n      autoClose: 3500,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  } else if (/(.*)(add)/.test(action.type)) {\n    toast.success(\"Added new task!\", {\n      position: \"top-right\",\n      autoClose: 3500,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  }\n\n  next(action);\n};\n\nexport default notificationMiddleware;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport tasksReducer from \"./reducers/tasksReducers\";\n\nimport notificationMiddleware from \"./middleware/notification\";\n\nexport default configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(notificationMiddleware),\n  reducer: {\n    tasks: tasksReducer,\n  },\n});\n","import React, { useMemo, useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { selectError, error } from \"../../../store/reducers/tasksReducers\";\n\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n} from \"@material-ui/core/styles\";\n\nimport {\n  Button,\n  Dialog,\n  Typography,\n  IconButton,\n  FormControl,\n  TextField,\n  InputAdornment,\n  FormControlLabel,\n  Checkbox,\n} from \"@material-ui/core\";\n\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport EventIcon from \"@material-ui/icons/Event\";\n\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\n\nimport DateFnsUtils from \"@date-io/date-fns\"; // choose your lib\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nfunction DialogTask(props: any) {\n  const { openDialog, closeDialog, addTask } = props;\n  const dispatch = useDispatch();\n  const errorIsActive = useSelector(selectError);\n  const [inputTask, setInputTask] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [priorityCheck, setPriorityCheck] = useState(false);\n\n  const handleClose = () => {\n    setInputTask(\"\");\n    setSelectedDate(new Date());\n    setPriorityCheck(false);\n    errorIsActive && dispatch(error({ error: false }));\n\n    closeDialog();\n  };\n  const handleAddTask = () => {\n    if (!inputTask) {\n      dispatch(error({ error: true }));\n      return;\n    }\n\n    addTask(inputTask, selectedDate, priorityCheck);\n\n    setInputTask(\"\");\n    setSelectedDate(new Date());\n    setPriorityCheck(false);\n  };\n\n  const handleChangeInput = useCallback(\n    (e) => {\n      errorIsActive && dispatch(error({ error: false }));\n      setInputTask(e.target.value);\n    },\n    [errorIsActive, dispatch]\n  );\n\n  const handleSetDate = useCallback((e) => setSelectedDate(e), [\n    setSelectedDate,\n  ]);\n\n  const handleSetCheckbox = useCallback(\n    (e) => setPriorityCheck(e.target.checked),\n    [setPriorityCheck]\n  );\n\n  const labelError = useMemo(() => (errorIsActive ? \"Error\" : \"Description\"), [\n    errorIsActive,\n  ]);\n\n  const helperTextError = useMemo(\n    () => errorIsActive && \"This filed is required\",\n    [errorIsActive]\n  );\n\n  return (\n    <div>\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"customized-dialog-title\"\n        open={openDialog}\n        fullWidth\n        disableBackdropClick\n      >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          Add new task\n        </DialogTitle>\n        <DialogContent dividers>\n          <FormControl style={{ width: \"100%\" }}>\n            <TextField\n              error={errorIsActive}\n              variant=\"filled\"\n              id=\"standard-error-helper-text\"\n              label={labelError}\n              helperText={helperTextError}\n              value={inputTask}\n              onChange={handleChangeInput}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <DescriptionIcon />\n                  </InputAdornment>\n                ),\n              }}\n            />\n\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n              <DatePicker\n                style={{ marginTop: 20 }}\n                value={selectedDate}\n                inputVariant=\"filled\"\n                disablePast\n                onChange={handleSetDate}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <EventIcon />\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </MuiPickersUtilsProvider>\n\n            <FormControlLabel\n              style={{ marginTop: 20, width: \"fit-content\" }}\n              control={<Checkbox name=\"checkedA\" color=\"primary\" />}\n              label=\"Prority\"\n              value={priorityCheck}\n              onChange={handleSetCheckbox}\n            />\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Cancel\n          </Button>\n          <Button\n            autoFocus\n            onClick={handleAddTask}\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Add task\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default DialogTask;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { add } from \"../../store/reducers/tasksReducers\";\n\nimport DialogTask from \"./DialogTask\";\n\nimport { Fab } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  addTask: {\n    marginLeft: 20,\n    marginTop: 10,\n  },\n});\n\nfunction AddTask() {\n  const dispatch = useDispatch();\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const classes = useStyles();\n\n  const handleOpenDialog = () => setOpenDialog(true);\n  const handleCloseDialog = () => setOpenDialog(false);\n\n  const handleAddTask = (text: string, date: string, priority: boolean) => {\n    const task = {\n      id: uuidv4(),\n      text,\n      date: new Date(date).toLocaleDateString().split(\".\").join(\"-\"),\n      active: true,\n      priority,\n    };\n\n    dispatch(add({ task }));\n\n    setOpenDialog(false);\n  };\n\n  return (\n    <div className={classes.addTask}>\n      <Fab\n        size=\"large\"\n        color=\"secondary\"\n        aria-label=\"add\"\n        onClick={handleOpenDialog}\n      >\n        <AddIcon />\n      </Fab>\n\n      <DialogTask\n        openDialog={openDialog}\n        addTask={handleAddTask}\n        closeDialog={handleCloseDialog}\n      />\n    </div>\n  );\n}\n\nexport default AddTask;\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, Paper } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 475,\n    height: 600,\n  },\n  card: {\n    margin: 10,\n  },\n  item: {\n    display: \"block\",\n    margin: 15,\n  },\n});\n\ninterface childrenInterface {\n  children: React.ReactNode;\n}\n\nfunction Portal(props: childrenInterface) {\n  const { children } = props;\n\n  const classes = useStyles();\n\n  return (\n    <div>\n      <Paper elevation={20} className={classes.card}>\n        <Card className={classes.root}>{children}</Card>\n      </Paper>\n    </div>\n  );\n}\n\nexport default Portal;\n","import React from \"react\";\n\nimport { Task } from \"../../components\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface stateTask {\n  id: string;\n  text: string;\n  date: string;\n  active: boolean;\n  priority: boolean;\n}\n\ninterface ListProps {\n  tasks: stateTask[];\n  index: any;\n  value: any;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    overflow: \"auto\",\n    overflowStyle: \"marquee,panner\",\n    maxHeight: \"560px\",\n  },\n});\n\nfunction List(props: ListProps) {\n  const { tasks, value, index, ...other } = props;\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      {tasks.map((task: stateTask) => (\n        <div\n          key={task.id}\n          role=\"tabpanel\"\n          hidden={value !== index}\n          id={`simple-tabpanel-${index}`}\n          aria-labelledby={`simple-tab-${index}`}\n          {...other}\n        >\n          <Task tasks={task} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default List;\n","import React, { useMemo } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Box,\n  List as ListMaterial,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  IconButton,\n} from \"@material-ui/core\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport DoneIcon from \"@material-ui/icons/Done\";\n\ninterface taskInterface {\n  tasks: { text: string; date: string; active: boolean; priority: boolean };\n}\n\nconst useStyles = makeStyles({\n  importantField: {\n    color: \"red\",\n    fontWeight: 400,\n  },\n  date: {\n    position: \"absolute\",\n    right: \"20%\",\n  },\n  title: {\n    fontSize: 20,\n  },\n});\n\nfunction Task(props: taskInterface) {\n  const { text, priority, date, active } = props.tasks;\n\n  const classes = useStyles();\n\n  const secondaryText = useMemo(\n    () => priority && <span className={classes.importantField}>Important</span>,\n    [priority, classes.importantField]\n  );\n\n  return (\n    <Box p={1}>\n      <ListMaterial>\n        <ListItem>\n          <ListItemText primary={text} secondary={secondaryText} />\n          <ListItemText className={classes.date}>{date}</ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              //   onClick={onClickRemove}\n            >\n              <DeleteIcon />\n            </IconButton>\n            {active && (\n              <IconButton\n                edge=\"end\"\n                aria-label=\"delete\"\n                // onClick={onClickFinish}\n              >\n                <DoneIcon />\n              </IconButton>\n            )}\n          </ListItemSecondaryAction>\n        </ListItem>\n      </ListMaterial>\n      <Divider />\n    </Box>\n  );\n}\n\nexport default Task;\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectTasks } from \"../../store/reducers/tasksReducers\";\n\nimport { Portal, List } from \"../../components\";\n\nimport { AppBar, Tabs, Tab } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\ninterface stateTask {\n  id?: void | string;\n  text?: string;\n  date?: string;\n  active?: boolean;\n  priority?: boolean;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\nfunction TasksList() {\n  const [value, setValue] = useState(0);\n  const tasks = useSelector(selectTasks);\n\n  const activeTasks = tasks.filter((task: stateTask) => task.active);\n  const finishedTasks = tasks.filter((task: stateTask) => !task.active);\n\n  const classes = useStyles();\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div>\n      <Portal>\n        <div className={classes.root}>\n          <AppBar position=\"static\">\n            <Tabs\n              variant=\"fullWidth\"\n              value={value}\n              onChange={handleChange}\n              aria-label=\"simple tabs example\"\n            >\n              <Tab label=\"Active Tasks\" {...a11yProps(0)} />\n              <Tab label=\"Finished Tasks\" {...a11yProps(1)} />\n            </Tabs>\n          </AppBar>\n\n          {/* Active Tasks */}\n          <List tasks={activeTasks} value={value} index={0} />\n\n          {/* Finished Task */}\n          <List tasks={finishedTasks} value={value} index={1} />\n        </div>\n      </Portal>\n    </div>\n  );\n}\n\nexport default TasksList;\n","import React from \"react\";\n\nimport { AddTask, TasksList } from \"./views\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"./assets/App.css\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className={classes.root}>\n          <TasksList />\n          {/* Finished Tasks*/}\n          <AddTask />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nimport { ToastContainer } from \"react-toastify\";\n\nimport App from \"./App\";\nimport \"./assets/index.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    <ToastContainer />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}